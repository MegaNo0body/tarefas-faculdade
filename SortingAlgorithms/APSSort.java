/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aps_sorting;

import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Random;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author uFernando
 */
public class APSSort extends javax.swing.JFrame {

    /**
     * Creates new form APSSort
     */
    public APSSort() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        SortValues = new javax.swing.JTextArea();
        LinesCount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        BubbleSortRes = new javax.swing.JTextArea();
        BubbleSortStatus = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        QuickSortRes = new javax.swing.JTextArea();
        QuickSortStatus = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TreeSortRes = new javax.swing.JTextArea();
        TreeSortStatus = new javax.swing.JLabel();
        AddRandomValues = new javax.swing.JButton();
        ExecAlgorithms = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Dados para ordenar:");

        SortValues.setColumns(20);
        SortValues.setRows(5);
        SortValues.setName("SortValues"); // NOI18N
        jScrollPane1.setViewportView(SortValues);

        LinesCount.setText("Um item por linha");

        jLabel3.setText("Bubble Sort:");

        BubbleSortRes.setEditable(false);
        BubbleSortRes.setColumns(20);
        BubbleSortRes.setRows(5);
        BubbleSortRes.setName("BubbleSortRes"); // NOI18N
        jScrollPane2.setViewportView(BubbleSortRes);

        BubbleSortStatus.setText("Tempo de execução");
        BubbleSortStatus.setName("BubbleSortStatus"); // NOI18N

        jLabel5.setText("Quick Sort:");

        QuickSortRes.setEditable(false);
        QuickSortRes.setColumns(20);
        QuickSortRes.setRows(5);
        QuickSortRes.setName("QuickSortRes"); // NOI18N
        jScrollPane3.setViewportView(QuickSortRes);

        QuickSortStatus.setText("Tempo de execução");
        QuickSortStatus.setName("QuickSortStatus"); // NOI18N

        jLabel7.setText("Tree Sort:");
        jLabel7.setToolTipText("");

        TreeSortRes.setEditable(false);
        TreeSortRes.setColumns(20);
        TreeSortRes.setRows(5);
        TreeSortRes.setName("TreeSortRes"); // NOI18N
        jScrollPane4.setViewportView(TreeSortRes);

        TreeSortStatus.setText("Tempo de execução");
        TreeSortStatus.setInheritsPopupMenu(false);
        TreeSortStatus.setName("TreeSortStatus"); // NOI18N

        AddRandomValues.setText("Adicionar valores aleatórios");
        AddRandomValues.setName("AddRandomValues"); // NOI18N
        AddRandomValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddRandomValuesActionPerformed(evt);
            }
        });

        ExecAlgorithms.setText("Executar");
        ExecAlgorithms.setName("ExecAlgorithms"); // NOI18N
        ExecAlgorithms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecAlgorithmsActionPerformed(evt);
            }
        });

        btnAbrir.setText("Abrir arquivo");
        btnAbrir.setToolTipText("");
        btnAbrir.setName("btnAbrir"); // NOI18N
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LinesCount))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(BubbleSortStatus)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(QuickSortStatus)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(TreeSortStatus)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAbrir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AddRandomValues)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ExecAlgorithms)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TreeSortStatus))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LinesCount)
                            .addComponent(BubbleSortStatus)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(QuickSortStatus)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddRandomValues)
                    .addComponent(ExecAlgorithms)
                    .addComponent(btnAbrir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Função ajudante que retorna um numero aleatorio como string
    public String newRandomString(Random r) {
        // Essa função usa o objeto Random para gerar um numero Long
        // pegamos o valor positivo desse numero aleatório usando Math.Abs
        // e convertemos esse numero para uma string, na base 10 (de 0 a 9)
        return Long.toString(Math.abs(r.nextLong()), 10);
    }

    // Função ajudante que atualiza a informação do numero de valores para ordenar
    public void UpdateItemsCount() {
        // Informamos o usuario o numero de valores que serão ordenados
        LinesCount.setText("Um item por linha ("+SortValues.getLineCount()+" items)");
    }
    
    private void AddRandomValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddRandomValuesActionPerformed
        // Adicionamos um novo valor aleatorio usando o objeto Random
        Random r = new Random();
        for(int i=0; i<1000; i++)
            SortValues.append(newRandomString(r)+'\n');
    }//GEN-LAST:event_AddRandomValuesActionPerformed

    private void ExecAlgorithmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecAlgorithmsActionPerformed
        // Criamos um vetor simples com os elementos de ordenação, usando a
        // função split, que reparte o texto quando encontra o delimitador,
        // em nosso caso, uma nova linha (caractere especial "\n")
        String[] values = SortValues.getText().split("\n");
        
        // Criamos um thread para executar o BubbleSort
        (new Thread(new ThreadSort<String>(new BubbleSort<String>(), BubbleSortStatus, BubbleSortRes, values))).start();
        
        // Criamos um thread para executar o QuickSort
        (new Thread(new ThreadSort<String>(new QuickSort<String>(), QuickSortStatus, QuickSortRes, values))).start();
        
        // Criamos um thread para executar o TreeSort
        (new Thread(new ThreadSort<String>(new TreeSort<String>(), TreeSortStatus, TreeSortRes, values))).start();
    }//GEN-LAST:event_ExecAlgorithmsActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        SortValues.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent de) {
                UpdateItemsCount();
            }

            @Override
            public void removeUpdate(DocumentEvent de) {
                UpdateItemsCount();
            }

            @Override
            public void changedUpdate(DocumentEvent de) {
                UpdateItemsCount();
            }
        });
    }//GEN-LAST:event_formWindowOpened

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        // Função que abre arquivos e insere o conteudo do arquivo no campo
        // SortValues.
        JFileChooser fc = new JFileChooser();
        File f;
        BufferedReader bufferIn;
        if(fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)  {
            f = fc.getSelectedFile();
            try {
                bufferIn = new BufferedReader(new FileReader(f));
                String line = bufferIn.readLine();
                while(line != null) {
                    SortValues.append(line+"\n");             
                    line = bufferIn.readLine();
                }
                bufferIn.close();
            } catch(Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao carregar arquivo, arquivo não encontrado");
            }
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(APSSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(APSSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(APSSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(APSSort.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new APSSort().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddRandomValues;
    private javax.swing.JTextArea BubbleSortRes;
    private javax.swing.JLabel BubbleSortStatus;
    private javax.swing.JButton ExecAlgorithms;
    private javax.swing.JLabel LinesCount;
    private javax.swing.JTextArea QuickSortRes;
    private javax.swing.JLabel QuickSortStatus;
    private javax.swing.JTextArea SortValues;
    private javax.swing.JTextArea TreeSortRes;
    private javax.swing.JLabel TreeSortStatus;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
